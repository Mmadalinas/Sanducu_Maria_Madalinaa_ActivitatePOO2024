#include <iostream>
#include<vector>
#include<list>
#include<map>

using namespace std;
class Librarie {
protected:
	string nume;
public:
	Librarie() {
		this->nume = "Mihai Eminescu";
	}
	Librarie(string nume) {
		this->nume = nume;
	}

	virtual string getDenumire() {
		return nume;
	}

 };

class LibrarieOnline :public Librarie {
public:
	string site;
	LibrarieOnline() :Librarie("Librarie Online") {
		this->site = "site.ro";
	}
	LibrarieOnline(string nume, string site) :Librarie(nume) {
		this->site = site;

	}

	string getDenumire() {
		return nume + "-" + site;
	}

	
};

void main() {
	LibrarieOnline l("Libris", "libris.ro");
	cout << l.getDenumire() << endl;

	Librarie* lib = new Librarie("humanitas");
	cout << lib->getDenumire();


	vector<float>v;
	v.push_back(1.2);
	v.push_back(1.9);
	v.push_back(5.2);
	v.push_back(7.2);
	float s = 0;
	for (int i = 0; i < v.size(); i++) {
		s += v[i];
	}
	if (v.size() > 0) {
		cout << "Media calculta este: " << s / v.size() << endl;;
	}
	else {
		cout << "Media nu se poate calculata.";
	}

	for (int i = 0; i < v.size(); i++) {
		cout << v[i] << endl;
	}


	list<Librarie*> lista;
	lista.push_front(new Librarie());
	lista.push_front(new Librarie("Carturesti"));
	lista.push_front(new LibrarieOnline("Bookzone", "Bookzon.ro"));
	lista.push_back(new LibrarieOnline());

	list<Librarie*>::iterator it = lista.begin();
	while (it != lista.end()) {
		cout << (*it)->getDenumire() << endl;
		it++;
	}


	map<int, Librarie> mapL;
	mapL.insert(pair<int, Librarie>(1, Librarie()));
	mapL.insert(pair<int, Librarie>(91, Librarie("Maria")));
	mapL.insert(pair<int, Librarie>(17, Librarie("Claudiu")));
	mapL.insert(pair<int, Librarie>(23, Librarie("David")));
	mapL.insert(pair<int, Librarie>(17, Librarie("Ioan")));

	cout << mapL[23].getDenumire();

	map<int, Librarie>::iterator iterator = mapL.begin();
	cout << "Afisare map: " << endl;
	while (iterator != mapL.end()) {

		cout << iterator->first << "-";
		cout << iterator->second.getDenumire();
		cout << endl;
		iterator++;
	}
}
